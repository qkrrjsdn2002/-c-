#include <iostream>
#include <queue>
#include <vector>
#include <algorithm>

using namespace std;

int main()
{
    int N, M, K, x1, y1, x2, y2, num=0;
    int square[10001];
    int dx[4] = {0,0,-1,1};
    int dy[4] = {-1,1,0,0};
    bool visited[101][101];
    
    cin >> N >> M >> K;
    
    for(int i=0; i<K; i++)
    {
        cin >> x1 >> y1 >> x2 >> y2;
        for(int j=x1; j<x2; j++)
        {
            for(int k=y1; k<y2; k++)
            {
                visited[k][j] = true;
            }
        }
    }
    queue <pair<int,int>> q;
    
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<M; j++)
        {
            if(visited[i][j]) continue;
            num++;
            visited[i][j] = true;
            q.push({i,j});
            int size = 0;
            while(!q.empty())
            {
                size++;
                pair<int,int> cur = q.front();
                q.pop();
                for(int dir=0; dir<4; dir++)
                {
                    int curx = cur.first + dx[dir];
                    int cury = cur.second + dy[dir];
                    if(curx < 0 || cury < 0 || curx >= N || cury >= M) continue;
                    if(visited[curx][cury]) continue;
                    visited[curx][cury] = true;
                    q.push({curx,cury});
                }
            }
            square[num-1] = size;
        }
    }
    
    sort(square,square+num);
    
    cout << num << "\n";
    
    for(int i=0; i<num; i++)
    {
        cout << square[i] << " ";
    }
    
    return 0;
}
