#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <tuple>

using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    int M, N, H;
    int dx[6] = {1,-1,0,0,0,0};
    int dy[6] = {0,0,1,-1,0,0};
    int dz[6] = {0,0,0,0,1,-1};
    int visited[101][101][101];
    int tomato[101][101][101];
    
    queue <tuple<int,int,int>> q;
    
    cin >> M >> N >> H;
    
    for(int i=0; i<H; i++)
    {
        for(int j=0; j<N; j++)
        {
            for(int k=0; k<M; k++)
            {
                cin >> tomato[i][j][k];
                if(tomato[i][j][k] == 1)
                {
                    q.push({i,j,k});
                }
                if(tomato[i][j][k] == 0)
                {
                    visited[i][j][k] = -1;
                }
            }
        }
    }
    
    while(!q.empty())
    {
        tuple<int,int,int> cur = q.front();
        q.pop();
        for(int dir=0; dir<6; dir++)
        {
            int curx = get<0>(cur) + dx[dir];
            int cury = get<1>(cur) + dy[dir];
            int curz = get<2>(cur) + dz[dir];
            if(curx < 0 || cury < 0 || curz < 0) continue;
            if(curx >= H || cury >= N || curz >= M) continue;
            if(visited[curx][cury][curz] >= 0) continue;
            visited[curx][cury][curz] = visited[get<0>(cur)][get<1>(cur)][get<2>(cur)] + 1;
            q.push({curx,cury,curz});
        }
    }
    
    int mx = 0;
    
    for(int i=0; i<H; i++)
    {
        for(int j=0; j<N; j++)
        {
            for(int k=0; k<M; k++)
            {
                if(visited[i][j][k] == -1)
                {
                    cout << -1;
                    return 0;
                }
                mx = max(mx,visited[i][j][k]);
            }
        }
    }
    
    cout << mx;
    
    return 0;
}
