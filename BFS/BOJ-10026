#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>

using namespace std;

int main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    
    int N, num = 0, disnum = 0;
    char area[101][101];
    bool visited[101][101] = {false};
    int dx[4] = {0,0,1,-1};
    int dy[4] = {1,-1,0,0};
    
    cin >> N;
    
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            cin >> area[i][j];
        }
    }
    
    
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            if(visited[i][j]) continue;
            num++;
            queue <pair<int,int>> q;
            q.push({i,j});
            visited[i][j] = true;
            while(!q.empty())
            {
                pair<int,int> cur = q.front();
                q.pop();
                for(int dir=0; dir<4; dir++)
                {
                    int curx = cur.first + dx[dir];
                    int cury = cur.second + dy[dir];
                    if(curx < 0 || cury < 0 || curx >= N || cury >= N) continue;
                    if(visited[curx][cury] || area[curx][cury] != area[i][j]) continue;
                    visited[curx][cury] = true;
                    q.push({curx,cury});
                }
            }
        }
    }
    
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            if(area[i][j] == 'G')
            {
                area[i][j] = 'R';
            }
            visited[i][j] = false;
        }
    }
    
    
    for(int i=0; i<N; i++)
    {
        for(int j=0; j<N; j++)
        {
            if(visited[i][j]) continue;
            disnum++;
            queue <pair<int,int>> q;
            q.push({i,j});
            visited[i][j] = true;
            while(!q.empty())
            {
                pair<int,int> cur = q.front();
                q.pop();
                for(int dir=0; dir<4; dir++)
                {
                    int curx = cur.first + dx[dir];
                    int cury = cur.second + dy[dir];
                    if(curx < 0 || cury < 0 || curx >= N || cury >= N) continue;
                    if(visited[curx][cury] || area[curx][cury] != area[i][j]) continue;
                    visited[curx][cury] = true;
                    q.push({curx,cury});
                }
            }
        }
    }
    
    cout << num << " " << disnum;
    
    return 0;
}
