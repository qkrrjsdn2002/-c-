#include <iostream>
#include <vector>
#include <queue>
#include <string>

using namespace std;

int R, C;
int dx[4] = {0,0,-1,1};
int dy[4] = {-1,1,0,0};
char maze[1001][1001];
int jh_visit[1001][1001] = {0,};
int fr_visit[1001][1001] = {0,};
bool fire_visit[1001][1001] = {0,};
string tmp;
queue <pair<int,int>> jh;
queue <pair<int,int>> fr;
int fire_BFS(int R, int C);
int jh_BFS(int R, int C);

int main()
{
    
    cin >> R >> C;
    
    for(int i=0; i<R; i++)
    {
        cin >> tmp;
        for(int j=0; j<C; j++)
        {
            maze[i][j] = tmp[j];
            if(maze[i][j] == 'J') jh.push({i,j});
            if(maze[i][j] == 'F')
            {
                fr.push({i,j});
                fire_visit[i][j] = true;
            }
        }
    }
    
    fire_BFS(R,C);
    jh_BFS(R,C);
    
    return 0;
}

int fire_BFS(int R, int C)
{
    
    for(int i=0; i<R; i++)
    {
        for(int j=0; j<C; j++)
        {
            while(!fr.empty())
            {
                pair <int,int> cur = fr.front();
                fr.pop();
                for(int dir=0; dir<4; dir++)
                {
                    int curx = cur.first + dx[dir];
                    int cury = cur.second + dy[dir];
                    if(curx < 0 || cury < 0 || curx >= R || cury >= C) continue;
                    if(fr_visit[curx][cury] != 0 || maze[curx][cury] != '.') continue;
                    fr_visit[curx][cury] = fr_visit[cur.first][cur.second] + 1;
                    fire_visit[curx][cury] = true;
                    fr.push({curx,cury});
                }
            }
        }
    }
    return 0;
}

int jh_BFS(int R, int C)
{
    for(int i=0; i<R; i++)
    {
        for(int j=0; j<C; j++)
        {
            while(!jh.empty())
            {
                pair <int,int> cur = jh.front();
                jh.pop();
                for(int dir=0; dir<4; dir++)
                {
                    int curx = cur.first + dx[dir];
                    int cury = cur.second + dy[dir];
                    if(curx < 0 || cury < 0 || curx >= R || cury >= C)
                    {
                        cout << jh_visit[cur.first][cur.second] + 1;
                        return 0;
                    }
                    if(jh_visit[curx][cury] != 0 || maze[curx][cury] != '.') continue;
                    if(fire_visit[curx][cury] == true)
                    {
                        if(jh_visit[cur.first][cur.second] + 1 >= fr_visit[curx][cury]) continue;
                    }
                    jh_visit[curx][cury] = jh_visit[cur.first][cur.second] + 1;
                    jh.push({curx,cury});
                }
            }
        }
    }
    
    cout << "IMPOSSIBLE";
    
    return 0;
}
